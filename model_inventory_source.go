/*
 * Snippets API
 *
 * Test description
 *
 * API version: v1
 * Contact: contact@snippets.local
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger
import (
	"time"
)

type InventorySource struct {
	Id int32 `json:"id,omitempty"`
	Type_ string `json:"type,omitempty"`
	Url string `json:"url,omitempty"`
	Related *interface{} `json:"related,omitempty"`
	SummaryFields *interface{} `json:"summary_fields,omitempty"`
	Created string `json:"created,omitempty"`
	Modified string `json:"modified,omitempty"`
	Name string `json:"name"`
	Description string `json:"description,omitempty"`
	Source string `json:"source,omitempty"`
	SourcePath string `json:"source_path,omitempty"`
	// Inventory source variables in YAML or JSON format.
	SourceVars string `json:"source_vars,omitempty"`
	// Cloud credential to use for inventory updates.
	Credential int32 `json:"credential,omitempty"`
	// Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as \"foo.bar\", in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(\"foo\", {}).get(\"bar\", default)
	EnabledVar string `json:"enabled_var,omitempty"`
	// Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=\"status.power_state\"and enabled_value=\"powered_on\" with host variables:{   \"status\": {     \"power_state\": \"powered_on\",     \"created\": \"2020-08-04T18:13:04+00:00\",     \"healthy\": true    },    \"name\": \"foobar\",    \"ip_address\": \"192.168.2.1\"}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled
	EnabledValue string `json:"enabled_value,omitempty"`
	// Regex where only matching hosts will be imported.
	HostFilter string `json:"host_filter,omitempty"`
	// Overwrite local groups and hosts from remote inventory source.
	Overwrite bool `json:"overwrite,omitempty"`
	// Overwrite local variables from remote inventory source.
	OverwriteVars bool `json:"overwrite_vars,omitempty"`
	// Local absolute file path containing a custom Python virtualenv to use
	CustomVirtualenv string `json:"custom_virtualenv,omitempty"`
	// The amount of time (in seconds) to run before the task is canceled.
	Timeout int32 `json:"timeout,omitempty"`
	Verbosity int32 `json:"verbosity,omitempty"`
	LastJobRun time.Time `json:"last_job_run,omitempty"`
	LastJobFailed bool `json:"last_job_failed,omitempty"`
	NextJobRun time.Time `json:"next_job_run,omitempty"`
	Status string `json:"status,omitempty"`
	// The container image to be used for execution.
	ExecutionEnvironment int32 `json:"execution_environment,omitempty"`
	Inventory int32 `json:"inventory"`
	UpdateOnLaunch bool `json:"update_on_launch,omitempty"`
	UpdateCacheTimeout int32 `json:"update_cache_timeout,omitempty"`
	// Project containing inventory file used as source.
	SourceProject string `json:"source_project,omitempty"`
	UpdateOnProjectUpdate bool `json:"update_on_project_update,omitempty"`
	LastUpdateFailed bool `json:"last_update_failed,omitempty"`
	LastUpdated time.Time `json:"last_updated,omitempty"`
}
